q()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
samplingdist = read.csv("C:\\Users\\Neha\\Downloads\\MidtermSamplingDistribution - Sheet1.csv")
hist(population$MidtermScore)
hist(sampilngdist$SampleMeansSize20) # histogram of sampling distribution with samples of size 20
hist(sampilngdist$SampleMeansSize80) # histogram of sampling distribution with samples of size 80
samplingdist = read.csv("C:\\Users\\Neha\\Downloads\\MidtermSamplingDistribution - Sheet1.csv")
hist(population$MidtermScore)
samplingdist = read.csv("C:\\Users\\Neha\\Downloads\\MidtermSamplingDistribution - Sheet1.csv")
hist(population$MidtermScore)
hist(sampilngdist$SampleMeansSize20) # histogram of sampling distribution with samples of size 20
source('~/.active-rstudio-document')
:
hist(population$SampleMeansSize20) # histogram of sampling distribution with samples of size 20
hist(population$MidtermScore)
source('~/.active-rstudio-document')
samplingdist = read.csv("C:\\Users\\Neha\\Downloads\\MidtermSamplingDistribution - Sheet1.csv")
hist(population$MidtermScore)
hist(samplingdist$SampleMeansSize20) # histogram of sampling distribution with samples of size 20
samplingdist = read.csv("C:\\Users\\Neha\\Downloads\\MidtermSamplingDistribution - Sheet1.csv")
hist(population$MidtermScore)
hist(samplingdist$SampleMeansSize20) # histogram of sampling distribution with samples of size 20
hist(samplingdist$SampleMeansSize80) # histogram of sampling distribution with samples of size 80
q()
pt(2.75,24)
pt(1.91,20)
pt(-1.91,20)
q()
pt(3.873,58)
pt(0.86,10)
pt(0.86634,10)
install.packages("rattle")
library("rattle", lib.loc="~/R/win-library/3.1")
rattle()
library("rattle", lib.loc="~/R/win-library/3.1")
rattle
rattle()
qqnorm(d.folk$duration) # qq plot for mortgage
qqline(d.folk$duration)
hist(d.folk$duration)
install.packages(c("digest", "manipulate", "Matrix", "munsell", "pbkrtest", "quantreg", "Rcpp", "RcppEigen", "rmarkdown"))
install.packages("digest")
install.packages("digest")
library("rattle", lib.loc="~/R/win-library/3.1")
rattle()
library("car", lib.loc="~/R/win-library/3.2")
library("cwhmisc", lib.loc="~/R/win-library/3.2")
library("data.table", lib.loc="~/R/win-library/3.2")
setwd("C:/Users/Neha/Documents/737/Project")
training_data <- read.csv("bank-additional-full-new.csv")
test_data <- read.csv("bank_test_data.csv")
training_data$TDA_group[training_data$term_deposit_amount< 5000] <- "<5000"
training_data$TDA_group[training_data$term_deposit_amount>= 5000 & training_data$term_deposit_amount<=10000] <- "5000-10000"
training_data$TDA_group[training_data$term_deposit_amount>= 10001 & training_data$term_deposit_amount<=15000] <- "10001-15000"
training_data$TDA_group[training_data$term_deposit_amount>= 15001 & training_data$term_deposit_amount<=20000] <- "15001-20000"
training_data$TDA_group[training_data$term_deposit_amount>= 20001 & training_data$term_deposit_amount<=25000] <- "20001-25000"
training_data$TDA_group[training_data$term_deposit_amount> 25000] <- ">25000"
training_data$age_group[training_data$age < 18] <- "<18"
training_data$age_group[training_data$age >= 18 & training_data$age<=24] <- "18-24"
training_data$age_group[training_data$age >= 25 & training_data$age<=34] <- "25-34"
training_data$age_group[training_data$age >= 35 & training_data$age<=44] <- "35-44"
training_data$age_group[training_data$age >= 45 & training_data$age<=54] <- "45-54"
training_data$age_group[training_data$age >= 55 & training_data$age<=64] <- "55-64"
training_data$age_group[training_data$age > 64] <- ">64"
training_data$balance_group[training_data$balance < 5000] <- "<5000"
training_data$balance_group[training_data$balance >= 5000 & training_data$balance<=10000] <- "5000-10000"
training_data$balance_group[training_data$balance >= 10001 & training_data$balance<=15000] <- "10001-15000"
training_data$balance_group[training_data$balance >= 15001 & training_data$balance<=20000] <- "15001-20000"
training_data$balance_group[training_data$balance >= 20001 & training_data$balance<=25000] <- "20001-25000"
training_data$balance_group[training_data$balance > 25000] <- ">25000"
test_data$TDA_group[test_data$term_deposit_amount< 5000] <- "<5000"
test_data$TDA_group[test_data$term_deposit_amount>= 5000 & test_data$term_deposit_amount<=10000] <- "5000-10000"
test_data$TDA_group[test_data$term_deposit_amount>= 10001 & test_data$term_deposit_amount<=15000] <- "10001-15000"
test_data$TDA_group[test_data$term_deposit_amount>= 15001 & test_data$term_deposit_amount<=20000] <- "15001-20000"
test_data$TDA_group[test_data$term_deposit_amount>= 20001 & test_data$term_deposit_amount<=25000] <- "20001-25000"
test_data$TDA_group[test_data$term_deposit_amount> 25000] <- ">25000"
test_data$age_group[test_data$age < 18] <- "<18"
test_data$age_group[test_data$age >= 18 & test_data$age<=24] <- "18-24"
test_data$age_group[test_data$age >= 25 & test_data$age<=34] <- "25-34"
test_data$age_group[test_data$age >= 35 & test_data$age<=44] <- "35-44"
test_data$age_group[test_data$age >= 45 & test_data$age<=54] <- "45-54"
test_data$age_group[test_data$age >= 55 & test_data$age<=64] <- "55-64"
test_data$age_group[test_data$age > 64] <- ">64"
test_data$balance_group[test_data$balance < 5000] <- "<5000"
test_data$balance_group[test_data$balance >= 5000 & test_data$balance<=10000] <- "5000-10000"
test_data$balance_group[test_data$balance >= 10001 & test_data$balance<=15000] <- "10001-15000"
test_data$balance_group[test_data$balance >= 15001 & test_data$balance<=20000] <- "15001-20000"
test_data$balance_group[test_data$balance >= 20001 & test_data$balance<=25000] <- "20001-25000"
test_data$balance_group[test_data$balance > 25000] <- ">25000"
newtrainingdata <- training_data[ which(training_data$y=='yes'), ]
newtestdata <- test_data[ which(test_data$y=='yes'), ]
index = sample(2, nrow(training_data), replace=TRUE, prob=c(0.8, 0.2))
trainsubsetData = training_data[index==1, ]
testsubsetData = training_data[index==2, ]
#Retrieve the dimension of an object(matrix, array or data frame).
dim(trainsubsetData)
dim(testsubsetData)
index = sample(2, nrow(newtrainingdata), replace=TRUE, prob=c(0.8, 0.2))
newtrainsubsetData = newtrainingdata[index==1, ]
newtestsubsetData = newtrainingdata[index==2, ]
library(rpart)
library(caret)
library(e1071)
library(data.table)
#Decision tree
decisionTree_perf <- function(table_name, var_name, model_name, data_name) {
pred_tree <- predict(model_name, data_name)
predictions <- data.table(cbind(data_name$y,pred_tree))
predictions[, predict := ifelse(no > yes, 1, 2)]
misClassificError <- mean(predictions$V1 != predictions$predict)
result_perc <- cbind(var_name,accr)
accr<- 1-misClassificError
table_name <- rbind(table_name, result_perc)
return(table_name)
}
result1 <- data.frame("Parameters" = character(), "Accuracy" = numeric())
result1 <- decisionTree_perf(result1, "job+education+balance", rpart(y ~ job+education+balance, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+education+balance+age_group+poutcome", rpart(y ~ job+education+balance+age_group+poutcome, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "education", rpart(y ~ education, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+education+poutcome+age_group+balance_group", rpart(y ~ job+education+poutcome+age_group+balance_group, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "age+poutcome", rpart(y ~age+poutcome, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
decisionTree_perf <- function(table_name, var_name, model_name, data_name) {
pred_tree <- predict(model_name, data_name)
predictions <- data.table(cbind(data_name$y,pred_tree))
predictions[, predict := ifelse(no > yes, 1, 2)]
misClassificError <- mean(predictions$V1 != predictions$predict)
accr<- 1-misClassificError
result_perc <- cbind(var_name,accr)
table_name <- rbind(table_name, result_perc)
return(table_name)
}
result1 <- data.frame("Parameters" = character(), "Accuracy" = numeric())
result1 <- decisionTree_perf(result1, "job+education+balance", rpart(y ~ job+education+balance, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+education+balance+age_group+poutcome", rpart(y ~ job+education+balance+age_group+poutcome, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "education", rpart(y ~ education, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+education+poutcome+age_group+balance_group", rpart(y ~ job+education+poutcome+age_group+balance_group, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "age+poutcome", rpart(y ~age+poutcome, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "age+nr.employed", rpart(y ~age+nr.employed, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "duration+emp.var.rate", rpart(y ~duration+emp.var.rate, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "duration+balance", rpart(y ~duration+balance, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "duration+balance+poutcome", rpart(y ~duration+balance+poutcome, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+education+balance", rpart(y ~job+education+balance, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+age+loan", rpart(y ~job+age+loan, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
result1 <- decisionTree_perf(result1, "job+age+loan+previous", rpart(y ~job+age+loan+previous, data=trainsubsetData, control = rpart.control(minsplit = 1)), testsubsetData)
write.csv(result1,"Accuracy of all Decision Tree Models.csv")
library(e1071)
library(cwhmisc)
record_performance <- function(df, name, model, test) {
svm.pred <- predict(model, test)
svm.table <- table(pred = svm.pred, true=test$y)
df <- rbind(df, data.frame(model=c(name), score=c(classAgreement(svm.table)$diag)))
return(df)
}
results3 <- data.frame("Parameters" = character(), "Accuracy" = numeric())
results3 <- record_performance(results3, "balance", svm(y ~ balance, data=trainsubsetData), testsubsetData)
results3 <- record_performance(results3, "balance + education", svm(y ~ balance + education, data=trainsubsetData), testsubsetData)
results3 <- record_performance(results3, "balance + education +job", svm(y ~ balance + education +job, data=training_data), test_data)
results3 <- record_performance(results3, "age", svm(y ~ age, data=training_data), test_data)
results3 <- record_performance(results3, "job+education+balance+age_group+poutcome", svm(y ~job+education+balance+age_group+poutcome, data=training_data), test_data)
results3 <- record_performance(results3, "age+poutcome", svm(y ~age+poutcome, data=training_data), test_data)
results3 <- record_performance(results3, "age+nr.employed", svm(y ~age+nr.employed, data=training_data), test_data)
results3 <- record_performance(results3, "duration+emp.var.rate", svm(y ~duration+emp.var.rate, data=training_data), test_data)
results3 <- record_performance(results3, "duration+balance_group", svm(y ~duration+balance_group, data=training_data), test_data)
results3 <- record_performance(results3, "duration+balance_group+poutcome", svm(y ~duration+balance_group_poutcome, data=training_data), test_data)
results3 <- record_performance(results3, "duration+balance_group+poutcome", svm(y ~duration+balance_group+poutcome, data=training_data), test_data)
write.csv(result3,"Accuracy of all SVM Models.csv")
write.csv(results3,"Accuracy of all SVM Models.csv")
rfbank=data.frame(training_data)
rfbank$y=recode(rfbank$y,"'yes'=1;else=0")
rfbank$TDA_group=recode(rfbank$TDA_group,"'<5000'=1;'5001-10000'=2;'10001-15000'=3;'15001-20000'=4;'20001-25000'=5;else=6")
#Omit the unused variables
rfbank <- rfbank[, c(-1,-5,-6,-9,-12,-13,-14,-15)]
rfxbank <- model.matrix(y~.,data=rfbank)[,-1]
rfxbank[1:3,]
#Training and testing sets
n <- length(rfbank$y)  #Number of observation in the source data
n1 <- floor(n*0.8)      #60% percent of the total number of observations
n2 <- (n - n1)          #40% percent of the total number of observations
#Create training and test data sets
set.seed(1)
RFtrain <- sample(1:n, n1)
RFxtrain <- rfxbank[RFtrain,]
RFxtest <- rfxbank[-RFtrain,]
RFytrain <- rfbank$y[RFtrain]
RFytest <- rfbank$y[-RFtrain]
RFtrainingds <- data.frame(y=RFytrain, RFxtrain)
RFtestds <- data.frame(y=RFytest,RFxtest)
library(randomForest)
RF  <-randomForest(y~., data=RFtrainingds)
training_data1 <- data.frame(training_data)
test_data1 <- data.frame(test_data)
classes <- as.factor(training_data1$TDA_group)
object <- naiveBayes(x=training_data1, y=classes, laplace = 0)
test_data1$predict <- as.character(predict(object, test_data1))
test_data1$TDA_group <- as.character(test_data1$TDA_group)
test_data1$result <- test_data1$predict == test_data1$TDA_group
View(test_data1)
write.csv(testdata1,"Predicted Output for Naive Bayes.csv")
write.csv(test_data1,"Predicted Output for Naive Bayes.csv")
